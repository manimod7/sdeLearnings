package lld.scorecard;

import java.util.*;

/**
 * Demo class showcasing the Scorecard Management System
 * Demonstrates comprehensive scorecard lifecycle and evaluation process
 */
public class ScorecardDemo {
    private static final ScorecardService service = new ScorecardService();
    
    public static void main(String[] args) {
        System.out.println("📋 Scorecard Management System Demo");
        System.out.println("===================================");
        
        // Run comprehensive demo scenarios
        runDemoScenarios();
        
        System.out.println("\n🎉 Demo completed successfully!");
    }
    
    /**
     * Run comprehensive demo scenarios
     */
    private static void runDemoScenarios() {
        System.out.println("\n🚀 Running Demo Scenarios...\n");
        
        // Scenario 1: User setup and scorecard creation
        System.out.println("Scenario 1: User Setup and Scorecard Creation");
        System.out.println("----------------------------------------------");
        
        // Register users with different roles
        service.registerUser("admin1", "Alice Admin", "alice@company.com", UserRole.ADMIN);
        service.registerUser("eval1", "Bob Evaluator", "bob@company.com", UserRole.EVALUATOR);
        service.registerUser("eval2", "Carol Evaluator", "carol@company.com", UserRole.EVALUATOR);
        service.registerUser("user1", "David Employee", "david@company.com", UserRole.USER);
        System.out.println("✅ Registered 4 users (1 admin, 2 evaluators, 1 user)");
        
        // Create performance review scorecard
        String scorecardId = service.createScorecard(\n            \"Employee Performance Review Q4\", \n            \"Quarterly performance evaluation for employees\", \n            \"admin1\");\n        System.out.println(\"✅ Created scorecard: \" + scorecardId);\n        \n        // Add sections to scorecard\n        addPerformanceSections(scorecardId);\n        System.out.println(\"✅ Added performance review sections\");\n        \n        // Scenario 2: Evaluator assignment and evaluation process\n        System.out.println(\"\\nScenario 2: Evaluator Assignment and Evaluation\");\n        System.out.println(\"-----------------------------------------------\");\n        \n        // Assign evaluators\n        service.assignEvaluator(scorecardId, \"eval1\", \"admin1\");\n        service.assignEvaluator(scorecardId, \"eval2\", \"admin1\");\n        System.out.println(\"✅ Assigned 2 evaluators to scorecard\");\n        \n        // Set target user\n        Scorecard scorecard = service.getScorecard(scorecardId, \"admin1\");\n        if (scorecard != null) {\n            scorecard.setTargetUser(\"user1\");\n            System.out.println(\"✅ Set target user for evaluation\");\n        }\n        \n        // Submit evaluations\n        submitSampleEvaluations(scorecardId);\n        System.out.println(\"✅ Submitted sample evaluations\");\n        \n        // Scenario 3: Score calculation and reporting\n        System.out.println(\"\\nScenario 3: Score Calculation and Reporting\");\n        System.out.println(\"-------------------------------------------\");\n        \n        // Calculate scores for each evaluator\n        Scorecard.ScorecardScore eval1Score = service.calculateScore(scorecardId, \"eval1\");\n        Scorecard.ScorecardScore eval2Score = service.calculateScore(scorecardId, \"eval2\");\n        \n        if (eval1Score != null && eval2Score != null) {\n            System.out.printf(\"✅ Evaluator 1 Score: %.2f\\n\", eval1Score.getOverallScore());\n            System.out.printf(\"✅ Evaluator 2 Score: %.2f\\n\", eval2Score.getOverallScore());\n        }\n        \n        // Generate comprehensive report\n        ScorecardService.ScorecardReport report = service.generateReport(scorecardId, \"admin1\");\n        if (report != null) {\n            System.out.printf(\"✅ Generated report - Average Score: %.2f\\n\", report.getAverageScore());\n        }\n        \n        // Scenario 4: Scorecard finalization\n        System.out.println(\"\\nScenario 4: Scorecard Finalization\");\n        System.out.println(\"----------------------------------\");\n        \n        // Finalize scorecard\n        boolean finalized = service.finalizeScorecard(scorecardId, \"admin1\");\n        System.out.println(\"✅ Scorecard finalized: \" + finalized);\n        \n        // User can now view their finalized scorecard\n        Scorecard finalScorecard = service.getScorecard(scorecardId, \"user1\");\n        if (finalScorecard != null) {\n            System.out.println(\"✅ Target user can view finalized scorecard\");\n        }\n        \n        // Scenario 5: Search and discovery\n        System.out.println(\"\\nScenario 5: Search and Discovery\");\n        System.out.println(\"--------------------------------\");\n        \n        // Get user scorecards\n        List<ScorecardService.ScorecardSummary> adminScorecards = service.getUserScorecards(\"admin1\");\n        List<ScorecardService.ScorecardSummary> evaluatorScorecards = service.getUserScorecards(\"eval1\");\n        List<ScorecardService.ScorecardSummary> userScorecards = service.getUserScorecards(\"user1\");\n        \n        System.out.println(\"✅ Admin can see \" + adminScorecards.size() + \" scorecards\");\n        System.out.println(\"✅ Evaluator can see \" + evaluatorScorecards.size() + \" scorecards\");\n        System.out.println(\"✅ User can see \" + userScorecards.size() + \" scorecards\");\n        \n        // Search scorecards\n        List<ScorecardService.ScorecardSummary> searchResults = \n            service.searchScorecards(\"admin1\", \"Performance\", null, null);\n        System.out.println(\"✅ Search found \" + searchResults.size() + \" matching scorecards\");\n        \n        // Demonstrate detailed scorecard information\n        demonstrateDetailedInfo(scorecardId);\n    }\n    \n    /**\n     * Add performance review sections to scorecard\n     */\n    private static void addPerformanceSections(String scorecardId) {\n        // Technical Skills Section\n        Section technicalSection = new Section(\"tech_skills\", \"Technical Skills\", \n            \"Evaluation of technical competencies\", 0.4);\n        \n        technicalSection.addQuestion(\n            new Question.Builder(\"coding_quality\", \"Rate coding quality and best practices\", ResponseType.RATING)\n                .weight(2.0)\n                .mandatory()\n                .helpText(\"Consider code readability, efficiency, and adherence to standards\")\n                .build()\n        );\n        \n        technicalSection.addQuestion(\n            new Question.Builder(\"problem_solving\", \"Problem solving ability\", ResponseType.RATING)\n                .weight(2.0)\n                .mandatory()\n                .build()\n        );\n        \n        technicalSection.addQuestion(\n            new Question.Builder(\"learning_agility\", \"Learning new technologies\", ResponseType.RATING)\n                .weight(1.5)\n                .build()\n        );\n        \n        service.addSection(scorecardId, technicalSection, \"admin1\");\n        \n        // Communication Section\n        Section commSection = new Section(\"communication\", \"Communication Skills\", \n            \"Evaluation of communication and collaboration\", 0.3);\n        \n        commSection.addQuestion(\n            new Question.Builder(\"team_collaboration\", \"Team collaboration effectiveness\", ResponseType.RATING)\n                .weight(2.0)\n                .mandatory()\n                .build()\n        );\n        \n        commSection.addQuestion(\n            new Question.Builder(\"written_comm\", \"Written communication clarity\", ResponseType.RATING)\n                .weight(1.5)\n                .build()\n        );\n        \n        commSection.addQuestion(\n            new Question.Builder(\"presentation_skills\", \"Presentation and verbal skills\", ResponseType.RATING)\n                .weight(1.0)\n                .build()\n        );\n        \n        service.addSection(scorecardId, commSection, \"admin1\");\n        \n        // Leadership Section\n        Section leadershipSection = new Section(\"leadership\", \"Leadership & Initiative\", \n            \"Evaluation of leadership potential and initiative\", 0.3);\n        \n        leadershipSection.addQuestion(\n            new Question.Builder(\"mentoring\", \"Mentoring and helping others\", ResponseType.RATING)\n                .weight(1.5)\n                .build()\n        );\n        \n        leadershipSection.addQuestion(\n            new Question.Builder(\"initiative\", \"Taking initiative on projects\", ResponseType.RATING)\n                .weight(2.0)\n                .mandatory()\n                .build()\n        );\n        \n        leadershipSection.addQuestion(\n            new Question.Builder(\"feedback_comments\", \"Additional feedback and comments\", ResponseType.TEXT)\n                .weight(0.5)\n                .minLength(10)\n                .maxLength(500)\n                .helpText(\"Provide specific examples and suggestions for improvement\")\n                .build()\n        );\n        \n        service.addSection(scorecardId, leadershipSection, \"admin1\");\n    }\n    \n    /**\n     * Submit sample evaluations from different evaluators\n     */\n    private static void submitSampleEvaluations(String scorecardId) {\n        // Evaluator 1 responses (more positive)\n        Map<String, Map<String, Object>> eval1Responses = new HashMap<>();\n        \n        Map<String, Object> techResponses1 = new HashMap<>();\n        techResponses1.put(\"coding_quality\", 4);\n        techResponses1.put(\"problem_solving\", 5);\n        techResponses1.put(\"learning_agility\", 4);\n        eval1Responses.put(\"tech_skills\", techResponses1);\n        \n        Map<String, Object> commResponses1 = new HashMap<>();\n        commResponses1.put(\"team_collaboration\", 4);\n        commResponses1.put(\"written_comm\", 4);\n        commResponses1.put(\"presentation_skills\", 3);\n        eval1Responses.put(\"communication\", commResponses1);\n        \n        Map<String, Object> leadershipResponses1 = new HashMap<>();\n        leadershipResponses1.put(\"mentoring\", 3);\n        leadershipResponses1.put(\"initiative\", 4);\n        leadershipResponses1.put(\"feedback_comments\", \"Strong technical skills and great team player. Could improve presentation skills.\");\n        eval1Responses.put(\"leadership\", leadershipResponses1);\n        \n        service.submitEvaluation(scorecardId, \"eval1\", eval1Responses);\n        \n        // Evaluator 2 responses (slightly different perspective)\n        Map<String, Map<String, Object>> eval2Responses = new HashMap<>();\n        \n        Map<String, Object> techResponses2 = new HashMap<>();\n        techResponses2.put(\"coding_quality\", 4);\n        techResponses2.put(\"problem_solving\", 4);\n        techResponses2.put(\"learning_agility\", 5);\n        eval2Responses.put(\"tech_skills\", techResponses2);\n        \n        Map<String, Object> commResponses2 = new HashMap<>();\n        commResponses2.put(\"team_collaboration\", 5);\n        commResponses2.put(\"written_comm\", 3);\n        commResponses2.put(\"presentation_skills\", 4);\n        eval2Responses.put(\"communication\", commResponses2);\n        \n        Map<String, Object> leadershipResponses2 = new HashMap<>();\n        leadershipResponses2.put(\"mentoring\", 4);\n        leadershipResponses2.put(\"initiative\", 3);\n        leadershipResponses2.put(\"feedback_comments\", \"Excellent collaborator with strong learning ability. Shows good mentoring potential.\");\n        eval2Responses.put(\"leadership\", leadershipResponses2);\n        \n        service.submitEvaluation(scorecardId, \"eval2\", eval2Responses);\n    }\n    \n    /**\n     * Demonstrate detailed scorecard information\n     */\n    private static void demonstrateDetailedInfo(String scorecardId) {\n        System.out.println(\"\\n📊 Detailed Scorecard Analysis\");\n        System.out.println(\"==============================\");\n        \n        Scorecard scorecard = service.getScorecard(scorecardId, \"admin1\");\n        if (scorecard == null) return;\n        \n        System.out.println(\"Scorecard: \" + scorecard.getTitle());\n        System.out.println(\"State: \" + scorecard.getState());\n        System.out.println(\"Sections: \" + scorecard.getSections().size());\n        System.out.println(\"Evaluators: \" + scorecard.getAssignedEvaluators().size());\n        \n        // Show section details\n        for (Section section : scorecard.getSections()) {\n            System.out.println(\"\\n📝 Section: \" + section.getTitle());\n            System.out.println(\"  Weight: \" + section.getWeight());\n            System.out.println(\"  Questions: \" + section.getQuestions().size());\n            \n            for (Question question : section.getQuestions()) {\n                System.out.println(\"    ❓ \" + question.getText() + \n                                 \" (\" + question.getResponseType() + \", weight: \" + question.getWeight() + \")\");\n            }\n        }\n        \n        // Show evaluation summary\n        ScorecardService.ScorecardReport report = service.generateReport(scorecardId, \"admin1\");\n        if (report != null) {\n            System.out.println(\"\\n📈 Evaluation Summary\");\n            System.out.println(\"Average Score: \" + String.format(\"%.2f\", report.getAverageScore()));\n            \n            for (Map.Entry<String, Scorecard.ScorecardScore> entry : report.getEvaluatorScores().entrySet()) {\n                System.out.println(\"Evaluator \" + entry.getKey() + \": \" + \n                                 String.format(\"%.2f\", entry.getValue().getOverallScore()));\n            }\n        }\n    }\n}"